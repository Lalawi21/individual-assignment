#include <iostream>
#include <cmath>
using namespace std;

// Binary Search function
int binarySearch(int arr[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    return -1;
}

// Exponential Search function
int exponentialSearch(int arr[], int size, int target) {
    if (arr[0] == target) return 0;

    int i = 1;
    while (i < size && arr[i] <= target) {
        i = i * 2;
    }
    
    return binarySearch(arr, i / 2, min(i, size - 1), target);
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25};
    int size = sizeof(arr) / sizeof(arr[0]);
    int target = 15;
    int result = exponentialSearch(arr, size, target);
    
    if (result != -1) 
        cout << "Element found at index " << result << endl;
    else 
        cout << "Element not found" << endl;
    return 0;
}

#include <iostream>
#include <cmath>
using namespace std;

// Jump Search function
int jumpSearch(int arr[], int size, int target) {
    int step = sqrt(size); // Block size (sqrt of array size)
    int prev = 0;
    
    // Jump in steps of size 'step' until you reach a block containing the target
    while (arr[min(step, size) - 1] < target) {
        prev = step;
        step += sqrt(size);
        if (prev >= size)
            return -1;
    }
    
    // Linear search within the block
    for (int i = prev; i < min(step, size); i++) {
        if (arr[i] == target)
            return i;
    }
    return -1; // Target not found
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25};
    int size = sizeof(arr) / sizeof(arr[0]);
    int target = 15;
    int result = jumpSearch(arr, size, target);
    
    if (result != -1)
        cout << "Element found at index " << result << endl;
    else
        cout << "Element not found" << endl;
    return 0;
}